#!/usr/bin/perl -w

=doc

=head2	download

PURPOSE

    Download a file from a GNOS repository using GeneTorrent

USAGE

./download.pl <--uuid String> \
	<--uuid String> \
	<--outputdir String> \
	[--filesize String] \
	[--filename String] \
	[--gtrepo String] \
	[--cpus String] \
	[--loglevel String] \
	[--keyfile String ]

uuid   		:   UUID of the sample
outputdir	:	Directory for downloaded BAM files
filesize  	:	File size in bytes
filename  	:	Name of file (not file location)
gtrepo  	:	URL of the source GNOS repository
cpus  		:	Number of CPUs to be used for download
loglevel  	:	Log level for GeneTorrent
keyfile  	:	Location of private key for access to the GNOS repository

EXAMPLE

Download a BAM file from CGHub using a custom keyfile

./download.pl \
--uuid eaa56631-c802-47ff-8118-3ed40d10302b \
--outputdir /data/download \
--keyfile /root/cghub.key

=cut

#### EXTERNAL PACKAGES
use Data::Dumper;
use Getopt::Long;

#### INTERNAL PACKAGES
my $installdir;
BEGIN {
	$installdir	=	$ENV{'installdir'} || "/agua";
    unshift(@INC, "$installdir/lib");
}
use FindBin qw($Bin);
use lib "$Bin/../lib";

#### INTERNAL PACKAGES
use GT::Download;
use Conf::Yaml;

my $log			=	4;
my $printlog	=	4;

my $outputdir	=	undef;
my $uuid		=	undef;
my $filesize	=	undef;
my $filename	=	undef;
my $gtrepo		=	undef;
my $cpus		=	undef;
my $loglevel	=	undef;
my $keyfile		=	undef;

GetOptions (
    'uuid=s'     	=> \$uuid,
    'outputdir=s'   => \$outputdir,
    'filename=s'   => \$filename,
    'filesize=s'   => \$filesize,
    'gtrepo=s'   	=> \$gtrepo,
    'cpus=s'   		=> \$cpus,
    'loglevel=s'   	=> \$loglevel,
    'keyfile=s'   	=> \$keyfile,

    'showlog=i'     => \$log,
    'printlog=i'    => \$printlog,
    'help'          => \$help
) or die "No options specified. Try '--help'\n";
usage() if defined $help;

#### SET CONF
my $configfile		=	"$Bin/conf/config.yaml";
my $conf = Conf::Yaml->new(
    memory      =>  0,
    inputfile   =>  $configfile,
    backup      =>  1,
    showlog     =>  $log,
    printlog    =>  $printlog,
    logfile     =>  $logfile
);

my $object = GT::Download->new({
    keyfile    =>  $keyfile,

	conf		=>	$conf,
    showlog     =>  $log,
    printlog    =>  $printlog,
    logfile     =>  $logfile
});

#print "filename: $filename\n";
if ( defined $filename ) {

	my $targetfile	=	"$outputdir/$uuid/$filename";
	#print "targetfile: $targetfile\n";

	if ( -f $targetfile ) {
		my $targetsize 	=	`ls -al $targetfile`;
		#print "targetsize: $targetsize\n";
		($targetsize)	=	$targetsize	=~	/\S+\s+\S+\s+\S+\s+\S+\s+(\S+)/;
		#print "FINAL targetsize: $targetsize\n";
		if ( defined $targetsize ) {
	
			if ( defined $filesize and $targetsize == $filesize ) {
				print "File already present: $filename ($filesize bytes). Exiting\n";
				exit;
			}
		}
		
	}
}

print "here\n";

$object->download($outputdir, $uuid, $gtrepo, $cpus, $loglevel);

